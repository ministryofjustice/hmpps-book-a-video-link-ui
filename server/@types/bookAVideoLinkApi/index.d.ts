/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/video-link-booking': {
    /** Endpoint to support the creation of video link bookings */
    post: operations['create']
  }
  '/probation-teams/user-preferences/set': {
    /** Endpoint to set the probation team preferences for a user (identified from the token content) */
    post: operations['setUserProbationTeamPreferences']
  }
  '/courts/user-preferences/set': {
    /** Endpoint to set the court preferences for a user (identified from the token content) */
    post: operations['setUserCourtPreferences']
  }
  '/reference-codes/group/{groupCode}': {
    /** Endpoint to return reference data for a provided group key */
    get: operations['getReferenceDataByGroup']
  }
  '/probation-teams/user-preferences': {
    /** Endpoint to return the list of enabled probation teams select by a user (identified from the token content) */
    get: operations['probationTeamsUserPreferences']
  }
  '/probation-teams/enabled': {
    /** Endpoint to return a list of enabled probation teams for video link bookings */
    get: operations['enabledProbationTeams']
  }
  '/prisons/{prisonCode}/locations': {
    /** Endpoint to return a list of suitable appointment locations at a given prison */
    get: operations['getAppointmentLocationsAtPrison']
  }
  '/prisons/list': {
    /** Endpoint to return the list of prisons known to the service */
    get: operations['prisonsList']
  }
  '/courts/user-preferences': {
    /** Endpoint to return the list of enabled courts selected by a user (identified from the token content) */
    get: operations['getUserCourtPreferences']
  }
  '/courts/enabled': {
    /** Endpoint to return a list of enabled courts for video link bookings */
    get: operations['enabledCourts']
  }
  '/booking-contacts/id/{videoBookingId}': {
    /** Endpoint to return a list of contacts associated with a booking */
    get: operations['getContactsForBooking']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /**
     * @description
     *       The appointment or appointments associated with the prisoner.
     *
     *       There should only ever be one appointment for a probation meeting.
     *
     *       Court meetings can have up to 3 meetings, a pre, main hearing and post meeting. They must always have a main meeting.
     *
     *       Appointment dates and times must not overlap.
     */
    Appointment: {
      /**
       * @description The appointment type
       * @example VLB_COURT_MAIN
       * @enum {string}
       */
      type: 'VLB_PROBATION' | 'VLB_COURT_PRE' | 'VLB_COURT_MAIN' | 'VLB_COURT_POST'
      /**
       * @description The location key for the appointment
       * @example PVI-A-1-001
       */
      locationKey: string
      /**
       * Format: date
       * @description The future date for which the appointment will start
       * @example 2022-12-23
       */
      date: string
      /**
       * Format: partial-time
       * @description Start time for the appointment on the day
       * @example 10:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description End time for the appointment on the day
       * @example 11:45
       */
      endTime: string
    }
    /** @description The request with the new video link booking details */
    CreateVideoBookingRequest: {
      /**
       * @description The booking type
       * @example COURT
       * @enum {string}
       */
      bookingType: 'COURT' | 'PROBATION'
      /** @description The prisoner or prisoners associated with the video link booking */
      prisoners: components['schemas']['PrisonerDetails'][]
      /**
       * @description The court code is needed if booking type is COURT, otherwise null
       * @example DRBYMC
       */
      courtCode?: string
      /**
       * @description The court hearing type is needed if booking type is COURT, otherwise null
       * @example APPEAL
       * @enum {string}
       */
      courtHearingType?:
        | 'APPEAL'
        | 'APPLICATION'
        | 'BACKER'
        | 'BAIL'
        | 'CIVIL'
        | 'CSE'
        | 'CTA'
        | 'IMMIGRATION_DEPORTATION'
        | 'FAMILY'
        | 'TRIAL'
        | 'FCMH'
        | 'FTR'
        | 'GRH'
        | 'MDA'
        | 'MEF'
        | 'NEWTON'
        | 'PLE'
        | 'PTPH'
        | 'PTR'
        | 'POCA'
        | 'REMAND'
        | 'SECTION_28'
        | 'SEN'
        | 'TRIBUNAL'
        | 'OTHER'
      /**
       * @description The probation team code is needed if booking type is PROBATION, otherwise null
       * @example BLKPPP
       */
      probationTeamCode?: string
      /**
       * @description The probation meeting type is needed if booking type is PROBATION, otherwise null
       * @example PSR
       * @enum {string}
       */
      probationMeetingType?: 'PSR' | 'RR'
      /**
       * @description Free text comments for the video link booking
       * @example Waiting to hear on legal representation
       */
      comments?: string
      /**
       * @description The video link for the appointment. Must be a valid URL
       * @example https://video.here.com
       */
      videoLinkUrl?: string
      /**
       * @description Set to true when called by a prison request. Will default to false.
       * @example false
       */
      createdByPrison?: boolean
    }
    /** @description The prisoner or prisoners associated with the video link booking */
    PrisonerDetails: {
      /**
       * @description The prison code for the prisoner
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner number (NOMIS ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description
       *       The appointment or appointments associated with the prisoner.
       *
       *       There should only ever be one appointment for a probation meeting.
       *
       *       Court meetings can have up to 3 meetings, a pre, main hearing and post meeting. They must always have a main meeting.
       *
       *       Appointment dates and times must not overlap.
       */
      appointments: components['schemas']['Appointment'][]
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The request body containing the user probation team preferences */
    SetProbationTeamPreferencesRequest: {
      /** @description The list of probation team codes to set as the preferences for this username. */
      probationTeamCodes: string[]
    }
    /** @description Describes the response from setting the user probation team preferences */
    SetProbationTeamPreferencesResponse: {
      /**
       * Format: int32
       * @description The count of probation teams saved as preferences for this user
       */
      probationTeamsSaved: number
    }
    /** @description The request body containing the user court preferences */
    SetCourtPreferencesRequest: {
      /** @description The list of court codes to set as the preferences for this username. */
      courtCodes: string[]
    }
    /** @description Describes the response from setting the user court preferences */
    SetCourtPreferencesResponse: {
      /**
       * Format: int32
       * @description The count of courts saved as preferences for this user
       */
      courtsSaved: number
    }
    /** @description Describes the details of a reference code */
    ReferenceCode: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this reference code.
       * @example 12345
       */
      referenceCodeId: number
      /**
       * @description The group name for related reference codes.
       * @example COURT_HEARING_TYPE
       */
      groupCode: string
      /**
       * @description The code for this reference data
       * @example SEN
       */
      code: string
      /**
       * @description A fuller description of the reference code
       * @example Sentencing hearing
       */
      description?: string
    }
    /** @description Describes the details of a probation team */
    ProbationTeam: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this probation team.
       * @example 12345
       */
      probationTeamId: number
      /**
       * @description A short code for this probation team.
       * @example NORTHWEST-PCC
       */
      code: string
      /**
       * @description A fuller description for this probation team
       * @example North West Primary Care
       */
      description: string
      /**
       * @description A boolean value to show whether enabled for video link bookings.
       * @example true
       */
      enabled: boolean
      /**
       * @description Notes relating to this probation team for opening hours, postal address, main contact.
       * @example Free form notes
       */
      notes?: string
    }
    Location: {
      /**
       * @description The unique location key for the location
       * @example BMI-VIDEOLINK
       */
      key: string
      /**
       * @description The description for the location, can be null
       * @example VIDEO LINK
       */
      description?: string
      /**
       * @description Flag indicates if the location is enabled, true is enabled and false is disabled.
       * @example true
       */
      enabled: boolean
    }
    /** @description Describes the details of a prison */
    Prison: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this prison.
       * @example 12345
       */
      prisonId: number
      /**
       * @description A short code for this prison.
       * @example BMI
       */
      code: string
      /**
       * @description A fuller description for this prison
       * @example HMP Birmingham
       */
      name: string
      /**
       * @description A boolean value to show whether the prison is enabled for self-service video link bookings by court/probation.
       * @example true
       */
      enabled: boolean
      /**
       * @description Notes relating to this prison, e.g. number of video-enabled rooms, address.
       * @example Free form notes
       */
      notes?: string
    }
    /** @description Describes the details of a court */
    Court: {
      /**
       * Format: int64
       * @description An internally-generated unique identifier for this court.
       * @example 12345
       */
      courtId: number
      /**
       * @description A short code for this court.
       * @example AVONCC
       */
      code: string
      /**
       * @description A fuller description for this court
       * @example Avon Crown Court
       */
      description: string
      /**
       * @description A boolean value to show whether enabled for video link bookings.
       * @example true
       */
      enabled: boolean
      /**
       * @description Notes relating to this court for opening hours, postal address, main contact.
       * @example Free form notes
       */
      notes?: string
    }
    /** @description Describes the details of a booking contact */
    BookingContact: {
      /**
       * Format: int64
       * @description Describes the internal id of the video booking
       * @example 123
       */
      videoBookingId: number
      /**
       * @description Describes the contact type
       * @example PRISON
       * @enum {string}
       */
      contactType: 'OWNER' | 'COURT' | 'PROBATION' | 'PRISON' | 'THIRD_PARTY'
      /**
       * @description Describes the contact name (optional)
       * @example Mr. Person-contact
       */
      name?: string
      /**
       * @description Describes the position or role of the contact person (optional)
       * @example BVLS Administrator
       */
      position?: string
      /**
       * @description Describes the email address of this contact (optional)
       * @example example@example.com
       */
      email?: string
      /**
       * @description Describes the telephone number of this contact (optional)
       * @example 00902 0909779
       */
      telephone?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Endpoint to support the creation of video link bookings */
  create: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVideoBookingRequest']
      }
    }
    responses: {
      /** @description The unique identifier of the created video booking */
      201: {
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to set the probation team preferences for a user (identified from the token content) */
  setUserProbationTeamPreferences: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SetProbationTeamPreferencesRequest']
      }
    }
    responses: {
      /** @description Count of the number of probation teams saved in this request */
      200: {
        content: {
          'application/json': components['schemas']['SetProbationTeamPreferencesResponse']
        }
      }
      /** @description Invalid request provided */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to set the court preferences for a user (identified from the token content) */
  setUserCourtPreferences: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SetCourtPreferencesRequest']
      }
    }
    responses: {
      /** @description Count of the number of courts saved in this request */
      200: {
        content: {
          'application/json': components['schemas']['SetCourtPreferencesResponse']
        }
      }
      /** @description Invalid request provided */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return reference data for a provided group key */
  getReferenceDataByGroup: {
    parameters: {
      path: {
        /** @description EnabledOnly true or false. Defaults to false if not supplied. */
        groupCode: string
      }
    }
    responses: {
      /** @description List of reference data codes/values */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return the list of enabled probation teams select by a user (identified from the token content) */
  probationTeamsUserPreferences: {
    responses: {
      /** @description Probation teams select by this user */
      200: {
        content: {
          'application/json': components['schemas']['ProbationTeam'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return a list of enabled probation teams for video link bookings */
  enabledProbationTeams: {
    responses: {
      /** @description Probation teams */
      200: {
        content: {
          'application/json': components['schemas']['ProbationTeam'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return a list of suitable appointment locations at a given prison */
  getAppointmentLocationsAtPrison: {
    parameters: {
      query?: {
        /** @description Enabled (active) locations only, true or false. Defaults to true if not supplied. */
        enabledOnly?: boolean
        /** @description Video link only, true or false. When true only returns video link suitable locations. Defaults to true if not supplied. */
        videoLinkOnly?: boolean
      }
      path: {
        /** @description The prison code for which locations will be retrieved. */
        prisonCode: string
      }
    }
    responses: {
      /** @description Locations */
      200: {
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return the list of prisons known to the service */
  prisonsList: {
    parameters: {
      query?: {
        /** @description EnabledOnly true or false. Defaults to false if not supplied. */
        enabledOnly?: boolean
      }
    }
    responses: {
      /** @description List of prisons */
      200: {
        content: {
          'application/json': components['schemas']['Prison'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return the list of enabled courts selected by a user (identified from the token content) */
  getUserCourtPreferences: {
    responses: {
      /** @description Courts selected by this user */
      200: {
        content: {
          'application/json': components['schemas']['Court'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return a list of enabled courts for video link bookings */
  enabledCourts: {
    responses: {
      /** @description Courts */
      200: {
        content: {
          'application/json': components['schemas']['Court'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Endpoint to return a list of contacts associated with a booking */
  getContactsForBooking: {
    parameters: {
      path: {
        videoBookingId: number
      }
    }
    responses: {
      /** @description Contacts for this booking */
      200: {
        content: {
          'application/json': components['schemas']['BookingContact'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The video booking ID was not found. */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
