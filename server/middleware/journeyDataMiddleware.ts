import { RequestHandler } from 'express'
import { Journey, JourneyData } from '../@types/express'

const MAX_CONCURRENT_JOURNEYS = 20

export default function journeyDataMiddleware(journeyName: keyof Journey): RequestHandler {
  return (req, res, next) => {
    // This function redefines the existing session properties, intercepting their getter and setters and replacing the
    // implementation with the usage of the journey data map. In this way, we can have journey instance specific session data (i.e. multiple
    // different browser tabs open with the same journey) without having to change the handlers or views, which remain unaware of this change.
    // The journeyId comes from the path parameter,generated by insertJourneyIdentifier.ts

    req.session.journey ??= {}
    req.session.journeyData ??= new Map<string, JourneyData>()

    Object.defineProperty(req.session.journey, journeyName, {
      get() {
        const { journeyId } = req.params as { journeyId: string }
        return req.session.journeyData.get(journeyId)?.[journeyName]
      },
      set(value) {
        const { journeyId } = req.params as { journeyId: string }
        let journeyData = req.session.journeyData.get(journeyId)

        if (!journeyData) {
          journeyData = { instanceUnixEpoch: Date.now() } as JourneyData
          req.session.journeyData.set(journeyId, journeyData)
        }

        journeyData[journeyName] = value

        if (value == null) {
          req.session.journeyData.delete(journeyId)
        }

        if (req.session.journeyData.size > MAX_CONCURRENT_JOURNEYS) {
          const oldestKey = [...req.session.journeyData.entries()].reduce(
            (oldest, [key, data]) =>
              data.instanceUnixEpoch < oldest.instanceUnixEpoch
                ? { key, instanceUnixEpoch: data.instanceUnixEpoch }
                : oldest,
            { key: '', instanceUnixEpoch: Infinity },
          ).key

          if (oldestKey) {
            req.session.journeyData.delete(oldestKey)
          }
        }
      },
    })

    next()
  }
}
